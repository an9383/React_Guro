{"mappings":"AAAA,KAAK;AACL,iCAAiC;AACjC,gCAAgC;AAEhC,iCAAiC;AACjC,gCAAgC;AAEhC,mCAAmC;AAEnC,qBAAqB;AACrB,8BAA8B;AAC9B,iCAAiC;AACjC,WAAW;AAEX,sCAAsC;AAEtC,eAAe;AACf,iCAAiC;AACjC,uCAAuC;AAEvC,uBAAuB;AACvB,2CAA2C;AAC3C,aAAa;AACb,IAAI;AAEJ,2BAA2B;AAC3B,4BAA4B;AAC5B,IAAI;AAEJ,uBAAuB;AACvB,gBAAgB;AAEhB,MAAM;AACN,uBAAuB;AACvB,2CAA2C;AAC3C,uCAAuC;AAEvC,uBAAuB;AACvB,2CAA2C;AAC3C,mBAAmB;AACnB,aAAa;AACb,IAAI;AAEJ,WAAW;AACX,2BAA2B;AAC3B,4BAA4B;AAC5B,IAAI;AAEJ,iCAAiC;AACjC,4CAA4C;AAC5C,oCAAoC;AAEpC,wBAAwB;AACxB,MAAM,cAAc,IAAI,QAAQ,CAAC,SAAQ;IACzC,QAAQ,GAAG,CAAC;IACZ,WAAW;QACT,IAAI,KAAK,MAAM,KAAK,KAChB,QAAQ;aAER,OAAO;IAEb,GAAE;IAEF,WACC,iCAAiC;KACjC,IAAI,CAAC,CAAC;QACL,QAAQ,GAAG,CAAC,GAAG,KAAK,kEAAU,CAAC;IACjC,EACC,kCAAkC;KACjC,KAAK,CAAC,CAAC;QACP,QAAQ,KAAK,CAAC;IACf;AACD","sources":["비동기.js"],"sourcesContent":["//비동기\r\n// console.log('은행 1번 번호표 업무 시작')\r\n// console.log('은행 1번 번호표 업무 끝')\r\n\r\n// console.log('은행 2번 번호표 업무 시작')\r\n// console.log('은행 2번 번호표 업무 끝')\r\n\r\n// console.log('악마 음료 슈렉 프라푸치노 주문')\r\n\r\n// setTimeout(() => {\r\n//     console.log('아메리카노 주문')\r\n//     console.log('아메리카노 주문 완료')\r\n// }, 3000)\r\n\r\n// console.log('악마 음료 슈렉 프라푸치노 주문 완료')\r\n\r\n//콜백 함수로 비동기 처리\r\n// function orderCoffee(coffee) {\r\n//   console.log(`${coffee}를 만드는 중...`)\r\n\r\n//   setTimeout(() => {\r\n//       console.log(`${coffee}가 만들어졌습니다.`)\r\n//   }, 3000)\r\n// }\r\n\r\n// function drinkCoffee() {\r\n//   console.log('커피를 마신다.')\r\n// }\r\n\r\n// orderCoffee('아메리카노')\r\n// drinkCoffee()\r\n\r\n//콜백함수\r\n// 콜백 함수를 사용하여 비동기 처리하기\r\n// function orderCoffee(coffee, callback) {\r\n//   console.log(`${coffee}를 만드는 중...`)\r\n\r\n//   setTimeout(() => {\r\n//       console.log(`${coffee}가 만들어졌습니다.`)\r\n//       callback()\r\n//   }, 3000)\r\n// }\r\n\r\n// // 콜백 함수\r\n// function drinkCoffee() {\r\n//   console.log('커피를 마신다.')\r\n// }\r\n\r\n// orderCoffee 함수를 호출하고 콜백 함수를 전달\r\n// 콜백 함수는 orderCoffee 함수에서 커피가 만들어진 후에 실행된다.\r\n// orderCoffee('아메리카노', drinkCoffee)\r\n\r\n//promise를 사용하여 비동기 처리하기\r\nconst orderCoffee = new Promise((resolve,reject)=>{\r\nconsole.log('커피를 만드는 중...')\r\nsetTimeout(() => {\r\n  if (Math.random() > 0.5) {\r\n      resolve('아메리카노 준비 완료!')\r\n  } else {\r\n      reject('주문을 받질 못했습니다.')\r\n  }\r\n},3000)\r\n\r\norderCoffee\r\n //resolve함수가 호출되면 then 매서드가 실행된다.\r\n.then((item)=>{\r\n  console.log(`${item}가 만들어졌습니다.`)\r\n})\r\n //reject 함수가 호출되면 catch 메서드가 실행된다.\r\n .catch((error)=>{\r\n  console.error(error)\r\n })\r\n})\r\n"],"names":[],"version":3,"file":"2. nodejs_1day.79e0fb77.js.map","sourceRoot":"/__parcel_source_root/"}